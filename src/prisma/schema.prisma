generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope             String?
  id_token           String? @db.String
  session_state      String?
  oauth_token_secret  String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String
  userId       String   @db.ObjectId
  expires      DateTime
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("verifiedAt")
  image         String?
  accounts      Account[]
  sessions      Session[]
  files         files[]
}

model VerificationRequest {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String  
  token      String  @unique
  expires    DateTime

  @@unique([identifier, token])
}

model files {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  name      String
  content   String
  userId    String   @db.ObjectId
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
}